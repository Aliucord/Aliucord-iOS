let socket;function setUpDebugWS(){connectWebsocket("localhost:9090");const e=nativeLoggingHook;globalThis.nativeLoggingHook=(t,o)=>((socket==null?void 0:socket.readyState)===WebSocket.OPEN&&socket.send(JSON.stringify({level:o,message:t})),e(t,o))}function connectWebsocket(host){console.log("Connecting to debug ws"),socket!==void 0&&socket.readyState!==WebSocket.CLOSED&&(socket.close(),socket=null),socket=new WebSocket(`ws://${host}`),socket.addEventListener("open",()=>console.log("Connected with debug websocket")),socket.addEventListener("error",e=>console.log("Error with debug websocket: ",e.message)),socket.addEventListener("message",message=>{try{console.log(eval(message.data))}catch(e){console.error(e)}})}function getModule(e,t=!0){const o=Object.keys(modules).map(n=>Number(n)).find(n=>n>=940&&n<=968||n==199||n==432||n==433||n==444||n==445||n==456?!1:__r(n)&&e(__r(n)));if(o===void 0)return null;const s=modules[o].publicModule;return t?s.exports:s}window.getModule=getModule;var getRandomValues,rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&(getRandomValues=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}var REGEX=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function validate(e){return typeof e=="string"&&REGEX.test(e)}for(var byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));function stringify(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,o=(byteToHex[e[t+0]]+byteToHex[e[t+1]]+byteToHex[e[t+2]]+byteToHex[e[t+3]]+"-"+byteToHex[e[t+4]]+byteToHex[e[t+5]]+"-"+byteToHex[e[t+6]]+byteToHex[e[t+7]]+"-"+byteToHex[e[t+8]]+byteToHex[e[t+9]]+"-"+byteToHex[e[t+10]]+byteToHex[e[t+11]]+byteToHex[e[t+12]]+byteToHex[e[t+13]]+byteToHex[e[t+14]]+byteToHex[e[t+15]]).toLowerCase();if(!validate(o))throw TypeError("Stringified UUID is invalid");return o}function v4(e,t,o){e=e||{};var s=e.random||(e.rng||rng)();if(s[6]=s[6]&15|64,s[8]=s[8]&63|128,t){o=o||0;for(var n=0;n<16;++n)t[o+n]=s[n];return t}return stringify(s)}const linkingModule=getModule(e=>e.openURL);async function sendCommand(e,t=[]){return new Promise((o,s)=>{const n=v4(),d={command:e,id:n,params:t};linkingModule.openURL(`aliucord://${JSON.stringify(d)}`).then(()=>{const u=linkingModule.addEventListener("url",c=>{let r=c.url;if(!!r.includes("aliucord://")){r=decodeURIComponent(r.replace("aliucord://",""));try{const a=JSON.parse(r);if(a.id!==n||a.data===void 0)return;u.remove(),o(a)}catch{return}}})})})}var ApplicationCommandTarget=(e=>(e[e.Chat=1]="Chat",e[e.User=2]="User",e[e.Message=3]="Message",e))(ApplicationCommandTarget||{}),ApplicationCommandType=(e=>(e[e.BuiltIn=0]="BuiltIn",e[e.BuiltInText=1]="BuiltInText",e[e.BuiltInIntegration=2]="BuiltInIntegration",e[e.Bot=3]="Bot",e[e.Placeholder=4]="Placeholder",e))(ApplicationCommandType||{}),ApplicationCommandOptionType=(e=>(e[e.SubCommand=1]="SubCommand",e[e.SubCommandGroup=2]="SubCommandGroup",e[e.String=3]="String",e[e.Integer=4]="Integer",e[e.Boolean=5]="Boolean",e[e.User=6]="User",e[e.Channel=7]="Channel",e[e.Role=8]="Role",e[e.Mentionnable=9]="Mentionnable",e[e.Number=10]="Number",e))(ApplicationCommandOptionType||{});function injectPluginsManager(){const e=getModule(r=>r.getBuiltInCommands,!1),t=getModule(r=>{var a;return(a=r.default)==null?void 0:a.sendBotMessage},!0),o={id:"-3",type:0,name:"Aliucord"},s=e.exports.BUILT_IN_SECTIONS;e.exports.BUILT_IN_SECTIONS={...s,[o.id]:o};const n={id:"installed-plugins",applicationId:o.id,name:"plugins",description:"List installed plugins.",target:ApplicationCommandTarget.Chat,type:ApplicationCommandType.BuiltIn,execute:(r,a)=>{const g=a.channel;sendCommand("list-plugins").then(m=>{const l=m.data;t.default.sendBotMessage(g.id,l==""?"No plugins installed.":`**Plugins installed (${l.split(",").length})**: ${l.split(",").join(", ")}`)})}},d={id:"install-plugin",applicationId:o.id,name:"install",description:"Install a plugin.",target:ApplicationCommandTarget.Chat,type:ApplicationCommandType.BuiltIn,options:[{name:"plugin",description:"Plugin url",required:!0,type:ApplicationCommandOptionType.String}],execute:(r,a)=>{const g=r[0].value,m=a.channel;sendCommand("install-plugin",[g]).then(l=>{t.default.sendBotMessage(m.id,l.data)})}},u={id:"uninstall-plugin",applicationId:o.id,name:"uninstall",description:"Uninstall a plugin.",target:ApplicationCommandTarget.Chat,type:ApplicationCommandType.BuiltIn,options:[{name:"plugin",description:"Plugin name",required:!0,type:ApplicationCommandOptionType.String}],execute:(r,a)=>{console.log(r);const g=r[0].value,m=a.channel;sendCommand("uninstall-plugin",[g]).then(l=>{t.default.sendBotMessage(m.id,l.data)})}},c=[n,d,u];e.exports.BUILT_IN_COMMANDS.push(...c)}function injectCommands(){const e=getModule(o=>o.getBuiltInCommands,!1),t=[{id:"websocket-devtools",name:"websocket",description:"Connect to the websocket devtools.",applicationId:"-3",target:ApplicationCommandTarget.Chat,type:ApplicationCommandType.BuiltIn,options:[{name:"host",description:"Host of the debugger.",type:ApplicationCommandOptionType.String,required:!0}],execute:function(o,s){const n=o[0].value;connectWebsocket(n)}},{id:"debug-command",name:"doctor",description:"Print out your device information.",applicationId:"-3",target:ApplicationCommandTarget.Chat,type:ApplicationCommandType.BuiltInText,execute:function(o){const s=getModule(c=>c.NativeModules).NativeModules,n=s.InfoDictionaryManager,d=s.DCDDeviceManager;let u=`**Debug Info:**
`;return u+=`> Discord: ${n.Version} (${n.Build})
`,u+=`> Device: ${d.device}
`,u+=`> System: ${d.systemVersion}
`,{content:u}}},{id:"reload-command",name:"reload",description:"Reload Discord.",applicationId:"-3",target:ApplicationCommandTarget.Chat,type:ApplicationCommandType.BuiltIn,execute:function(o){getModule(s=>s.NativeModules).NativeModules.BundleUpdaterManager.reload()}}];e.exports.BUILT_IN_COMMANDS.push(...t)}try{setUpDebugWS(),injectPluginsManager(),injectCommands()}catch(e){console.error(e)}
