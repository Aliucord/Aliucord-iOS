function modulesBlacklist(e){return e==199||e==432||e==433||e==444||e==445||e==456}function getModule(e,t=!0){const n=getModules(e,!0);if(n.length===0)return;const{publicModule:o}=modules[n[0]];return t?o.exports:o}function getModules(e,t=!1){const n=a=>{if(modulesBlacklist(a))return;const s=modules[a];if(s.isInitialized||__r(Number(a)),s.publicModule.exports!==void 0)return e(s.publicModule.exports)};return(t?[Object.keys(modules).find(n)]:Object.keys(modules).filter(n)).filter(a=>a!==void 0).map(a=>Number(a))}function getModuleByProps(...e){return getModule(t=>e.every(n=>t[n]),!0)}function getModuleByIndex(e){const t=modules[e];if(t!==void 0)return t.isInitialized||__r(Number(e)),t.publicModule}const assetsModule=getModule(e=>e.registerAsset);function getAssetByName(e){let t,n=1;for(;t=assetsModule.getAssetByID(n),!(t===void 0||t.name===e);)n++;return{id:n,...t}}function getAssets(){const e=[];let t=1;for(;;){const n=assetsModule.getAssetByID(t);if(n===void 0)break;e.push({id:t,...n}),t++}return e}const patches=[];function getPatchesByCaller(e){const t=[];for(const n of patches)for(const o of n.patches)o.caller===e&&t.push(o);return t}function unpatchAll(e){const t=getPatchesByCaller(e);if(!!t.length)for(const n of t)n.unpatch()}function override(e){return function(){if(!e.patches.length)return e.original.apply(this,arguments);let t,n=arguments;for(const a of e.patches.filter(s=>s.type==="before"))try{const s=a.callback(this,n,e.original.bind(this));Array.isArray(s)&&(n=s)}catch{console.error(`Could not fire before patch for ${e.func} of ${a.caller}`)}const o=e.patches.filter(a=>a.type==="instead");if(!o.length)t=e.original.apply(this,n);else for(const a of o)try{const s=a.callback(this,n,e.original.bind(this));s!==void 0&&(t=s)}catch{console.error(`Could not fire instead patch for ${e.func} of ${a.caller}`)}for(const a of e.patches.filter(s=>s.type==="after"))try{const s=a.callback(this,n,t,u=>t=u);s!==void 0&&(t=s)}catch{console.error(`Could not fire after patch for ${e.func} of ${a.caller}`)}return t}}function push([e,t,n]){const o={caller:e,mdl:t,func:n,original:t[n],unpatch:()=>{o.mdl[o.func]=o.original,o.patches=[]},patches:[]};return t[n]=override(o),Object.assign(t[n],o.original,{toString:()=>o.original.toString(),__original:o.original}),patches.push(o),o}function get$1(e,t,n){const o=patches.find(a=>a.mdl==t&&a.func==n);return o||push([e,t,n])}function patch$1(e,t,n,o,a="after"){const s=get$1(e,t,n),u={caller:e,type:a,id:s.patches.length,callback:o,unpatch:()=>{if(s.patches.splice(s.patches.findIndex(c=>c.id===u.id&&c.type===a),1),s.patches.length<=0){const c=patches.findIndex(r=>r.mdl===t&&r.func===n);patches[c].unpatch(),patches.splice(c,1)}}};return s.patches.push(u),u.unpatch}function createPatch(e){return{getPatchesByCaller,before:(...t)=>patchBefore(e,...t),instead:(...t)=>patchInstead(e,...t),after:(...t)=>patchAfter(e,...t),unpatchAll:()=>unpatchAll(e)}}function patchBefore(e,t,n,o){patch$1(e,t,n,o,"before")}function patchInstead(e,t,n,o){patch$1(e,t,n,o,"instead")}function patchAfter(e,t,n,o){patch$1(e,t,n,o,"after")}const clydeModule=getModule(e=>{var t;return(t=e.default)==null?void 0:t.sendBotMessage});function sendReply(e,t){clydeModule.default.sendBotMessage(e,t)}const Patcher=createPatch("aliucord-commands"),Commands=getModuleByProps("getBuiltInCommands"),Discovery=getModuleByProps("useApplicationCommandsDiscoveryState"),Icons=getModuleByProps("getIconURL");let commands$1=[];const section={id:"aliucord",type:1,name:"Aliucord",icon:"__ALIUCORD__"};Patcher.after(Commands,"getBuiltInCommands",(e,t,n)=>[...n,...commands$1]),Patcher.after(Icons,"getIconURL",(e,[,t])=>{if(t.icon==="__ALIUCORD__")return"https://cdn.discordapp.com/icons/811255666990907402/912861e37f0efa5c77729592ea8f7b8f.png?size=256"}),Patcher.after(Discovery,"useApplicationCommandsDiscoveryState",(e,t,n)=>{var o;if(!n.discoverySections.find(s=>s.key==section.id)&&commands$1.length){const s=[...commands$1.values()];n.applicationCommandSections.push(section),n.discoveryCommands.push(...s),n.commands.push(...s.filter(u=>!n.commands.some(c=>c.name===u.name))),n.discoverySections.push({data:s,key:section.id,section}),n.sectionsOffset.push(commands$1.length)}const a=n.discoverySections.findIndex(s=>s.key==="-2");if((o=n.discoverySections[a])==null?void 0:o.data){const s=n.discoverySections[a];s.data=s.data.filter(u=>!u.__aliucord),s.data.length==0&&n.discoverySections.splice(a,1)}});function registerCommands(e,t){t.map(n=>{n.__aliucord=!0,n.caller=e}),commands$1.push(...t)}function unregisterCommands(e){commands$1=commands$1.filter(t=>t.caller!=e)}const dialogModule=getModule(e=>{var t;return(t=e.default)==null?void 0:t.show});function showDialog(e){dialogModule.default.show(e)}const nativeModules=getModule(e=>e.NativeModules).NativeModules;function reloadDiscord(){nativeModules.BundleUpdaterManager.reload()}function getVersion(){return nativeModules.InfoDictionaryManager.Version}function getBuild(){return nativeModules.InfoDictionaryManager.Build}function getDevice(){return nativeModules.DCDDeviceManager.device}function getSystemVersion(){return nativeModules.DCDDeviceManager.systemVersion}const restModule=getModule(e=>{var t;return(t=e.default)==null?void 0:t.getAPIBaseURL});async function get(e){return restModule.default.get(e)}async function post(e){return restModule.default.post(e)}async function put(e){return restModule.default.put(e)}async function patch(e){return restModule.default.patch(e)}async function _delete(e){return restModule.default.delete(e)}async function getAPIBaseURL(){return restModule.default.getAPIBaseURL()}const storageModule=getModule(e=>e.getItem);async function getItem(e){return storageModule.getItem(e)}async function setItem(e,t){return storageModule.setItem(e,t)}async function removeItem(e){return storageModule.removeItem(e)}const toastModule=getModule(e=>{var t,n,o,a,s;return((t=e.default)==null?void 0:t.open)&&((n=e.default)==null?void 0:n.close)&&!((o=e.default)==null?void 0:o.openLazy)&&!((a=e.default)==null?void 0:a.startDrag)&&!((s=e.default)==null?void 0:s.init)});function showToast(e){toastModule.default.open(e)}const tokenModule=getModule(e=>{var t;return(t=e.default)==null?void 0:t.setToken});function getToken(){return tokenModule.default.getToken()}function setToken(e){return tokenModule.default.setToken(e)}function hideToken(){tokenModule.default.hideToken()}function showToken(){tokenModule.default.showToken()}function removeToken(){tokenModule.default.removeToken()}const userModule=getModule(e=>e.fetchProfile);async function fetchCurrentUser(){return userModule.fetchCurrentUser()}async function fetchProfile(e){return userModule.fetchProfile(e)}async function getUser(e){return userModule.getUser(e)}function prepareApi(){window.aliucord={getModule,getModules,getModuleByProps,getModuleByIndex,getAssetByName,getAssets,patcher:{createPatch,patchBefore,patchInstead,patchAfter},clyde:{sendReply},commands:{registerCommands,unregisterCommands},dialog:{showDialog},native:{reloadDiscord,getVersion,getBuild,getDevice,getSystemVersion},rest:{get,post,put,patch,delete:_delete,getAPIBaseURL},storage:{getItem,setItem,removeItem},toast:{showToast},token:{getToken,setToken,hideToken,showToken,removeToken},users:{fetchCurrentUser,fetchProfile,getUser}}}let socket;function setUpDebugWS(){connectWebsocket("localhost:9090");const e=nativeLoggingHook;globalThis.nativeLoggingHook=(t,n)=>((socket==null?void 0:socket.readyState)===WebSocket.OPEN&&socket.send(JSON.stringify({level:n,message:t})),e(t,n))}function connectWebsocket(host){console.log("Connecting to debug ws"),socket!==void 0&&socket.readyState!==WebSocket.CLOSED&&(socket.close(),socket=null),socket=new WebSocket(`ws://${host}`),socket.addEventListener("open",()=>{console.log("Connected with debug websocket"),showToast({content:"Connected to the websocket server."})}),socket.addEventListener("error",e=>{console.log("Error with debug websocket: ",e.message),showToast({content:"An error occured with the websocket connection."})}),socket.addEventListener("close",e=>{console.log("Error with debug websocket: ",e.message),showToast({content:"The websocket connection has been closed."})}),socket.addEventListener("message",message=>{try{console.log(eval(message.data))}catch(e){console.error(e)}})}function sendMessage(e){(socket==null?void 0:socket.readyState)===WebSocket.OPEN&&socket.send(e)}var commands={};Object.defineProperty(commands,"__esModule",{value:!0}),commands.InteractionTypes=ApplicationCommandOptionType_1=commands.ApplicationCommandOptionType=commands.ApplicationCommandPermissionType=ApplicationCommandInputType_1=commands.ApplicationCommandInputType=ApplicationCommandType_1=commands.ApplicationCommandType=commands.ApplicationCommandSectionType=void 0;var ApplicationCommandSectionType;(function(e){e[e.BuiltIn=0]="BuiltIn",e[e.Guild=1]="Guild",e[e.DM=2]="DM"})(ApplicationCommandSectionType||(ApplicationCommandSectionType={})),commands.ApplicationCommandSectionType=ApplicationCommandSectionType;var ApplicationCommandType;(function(e){e[e.Chat=1]="Chat",e[e.User=2]="User",e[e.Message=3]="Message"})(ApplicationCommandType||(ApplicationCommandType={}));var ApplicationCommandType_1=commands.ApplicationCommandType=ApplicationCommandType,ApplicationCommandInputType;(function(e){e[e.BuiltIn=0]="BuiltIn",e[e.BuiltInText=1]="BuiltInText",e[e.BuiltInIntegration=2]="BuiltInIntegration",e[e.Bot=3]="Bot",e[e.Placeholder=4]="Placeholder"})(ApplicationCommandInputType||(ApplicationCommandInputType={}));var ApplicationCommandInputType_1=commands.ApplicationCommandInputType=ApplicationCommandInputType,ApplicationCommandPermissionType;(function(e){e[e.Role=1]="Role",e[e.User=2]="User"})(ApplicationCommandPermissionType||(ApplicationCommandPermissionType={})),commands.ApplicationCommandPermissionType=ApplicationCommandPermissionType;var ApplicationCommandOptionType;(function(e){e[e.SubCommand=1]="SubCommand",e[e.SubCommandGroup=2]="SubCommandGroup",e[e.String=3]="String",e[e.Integer=4]="Integer",e[e.Boolean=5]="Boolean",e[e.User=6]="User",e[e.Channel=7]="Channel",e[e.Role=8]="Role",e[e.Mentionnable=9]="Mentionnable",e[e.Number=10]="Number"})(ApplicationCommandOptionType||(ApplicationCommandOptionType={}));var ApplicationCommandOptionType_1=commands.ApplicationCommandOptionType=ApplicationCommandOptionType,InteractionTypes;(function(e){e[e.ApplicationCommand=2]="ApplicationCommand",e[e.MessageComponent=3]="MessageComponent"})(InteractionTypes||(InteractionTypes={})),commands.InteractionTypes=InteractionTypes;var getRandomValues,rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&(getRandomValues=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}var REGEX=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function validate(e){return typeof e=="string"&&REGEX.test(e)}for(var byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));function stringify(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,n=(byteToHex[e[t+0]]+byteToHex[e[t+1]]+byteToHex[e[t+2]]+byteToHex[e[t+3]]+"-"+byteToHex[e[t+4]]+byteToHex[e[t+5]]+"-"+byteToHex[e[t+6]]+byteToHex[e[t+7]]+"-"+byteToHex[e[t+8]]+byteToHex[e[t+9]]+"-"+byteToHex[e[t+10]]+byteToHex[e[t+11]]+byteToHex[e[t+12]]+byteToHex[e[t+13]]+byteToHex[e[t+14]]+byteToHex[e[t+15]]).toLowerCase();if(!validate(n))throw TypeError("Stringified UUID is invalid");return n}function v4(e,t,n){e=e||{};var o=e.random||(e.rng||rng)();if(o[6]=o[6]&15|64,o[8]=o[8]&63|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=o[a];return t}return stringify(o)}const linkingModule=getModule(e=>e.openURL);async function sendCommand(e,t=[]){return new Promise((n,o)=>{const a=v4(),s={command:e,id:a,params:t};linkingModule.openURL(`aliucord://${JSON.stringify(s)}`).then(()=>{const u=linkingModule.addEventListener("url",c=>{let r=c.url;if(!!r.includes("aliucord://")){r=decodeURIComponent(r.replace("aliucord://",""));try{const l=JSON.parse(r);if(l.id!==a||l.data===void 0)return;u.remove(),n(l)}catch{return}}})})})}const aliucordSection={id:"-3",type:0,name:"Aliucord"};function injectPluginsManager(){const e=getModule(u=>u.getBuiltInCommands,!1),t=e.exports.BUILT_IN_SECTIONS;e.exports.BUILT_IN_SECTIONS={...t,[aliucordSection.id]:aliucordSection};const n={id:"installed-plugins",applicationId:aliucordSection.id,name:"plugins",description:"List installed plugins.",type:ApplicationCommandType_1.Chat,inputType:ApplicationCommandInputType_1.BuiltIn,execute:(u,c)=>{const r=c.channel;sendCommand("list-plugins").then(l=>{const d=l.data;sendReply(r.id,d==""?"No plugins installed.":`**Plugins installed (${d.split(",").length})**: ${d.split(",").join(", ")}`)})}},o={id:"install-plugin",applicationId:aliucordSection.id,name:"install",description:"Install a plugin.",type:ApplicationCommandType_1.Chat,inputType:ApplicationCommandInputType_1.BuiltIn,options:[{name:"plugin",description:"Plugin url",required:!0,type:ApplicationCommandOptionType_1.String}],execute:(u,c)=>{const r=u[0].value,l=c.channel;sendCommand("install-plugin",[r]).then(d=>{sendReply(l.id,d.data)})}},a={id:"uninstall-plugin",applicationId:aliucordSection.id,name:"uninstall",description:"Uninstall a plugin.",type:ApplicationCommandType_1.Chat,inputType:ApplicationCommandInputType_1.BuiltIn,options:[{name:"plugin",description:"Plugin name",required:!0,type:ApplicationCommandOptionType_1.String}],execute:(u,c)=>{const r=u[0].value,l=c.channel;sendCommand("uninstall-plugin",[r]).then(d=>{sendReply(l.id,d.data)})}};registerCommands("aliucord",[n,o,a])}function injectCommands(){const e=[{id:"websocket-devtools",name:"websocket",description:"Connect to the websocket devtools.",applicationId:aliucordSection.id,type:ApplicationCommandType_1.Chat,inputType:ApplicationCommandInputType_1.BuiltIn,options:[{name:"host",description:"Host of the debugger.",type:ApplicationCommandOptionType_1.String,required:!0}],execute:t=>{const n=t[0].value;connectWebsocket(n)}},{id:"debug-command",name:"debug",description:"Print out your device information.",applicationId:aliucordSection.id,type:ApplicationCommandType_1.Chat,inputType:ApplicationCommandInputType_1.BuiltInText,execute:()=>{let t=`**Debug Info:**
`;return t+=`> Discord: ${getVersion()} (${getBuild()})
`,t+=`> Device: ${getDevice()}
`,t+=`> System: ${getSystemVersion()}
`,{content:t}}},{id:"reload-command",name:"reload",description:"Reload Discord.",applicationId:aliucordSection.id,type:ApplicationCommandType_1.Chat,inputType:ApplicationCommandInputType_1.BuiltIn,execute:function(t){reloadDiscord()}},{id:"token-command",name:"token",description:"Show your Discord'token.",applicationId:aliucordSection.id,type:ApplicationCommandType_1.Chat,inputType:ApplicationCommandInputType_1.BuiltIn,execute:function(t,n){const o=getToken(),a=n.channel.id;sendReply(a,`\`${o}\``)}},{id:"dump-command",name:"dump",description:"Dump Discord's modules.",applicationId:aliucordSection.id,type:ApplicationCommandType_1.Chat,inputType:ApplicationCommandInputType_1.BuiltIn,execute:function(t,n){var o;const a=n.channel.id,s=window.modules,u=c=>{let r=[];return JSON.stringify(c,(l,d)=>{try{if(typeof d=="object"&&d!==null){if(r.includes(d))return;r.push(d)}return typeof d=="function"&&d!==null?r.includes(l)?void 0:(r.push(l),"[Function]"):d}catch{}})};for(const c of Object.keys(s))try{const r=s[c],l={id:c};r.publicModule.exports&&(typeof r.publicModule.exports=="function"?l.exports=`[Function: ${r.publicModule.exports.name}]`:l.exports=JSON.parse(u(r.publicModule.exports))),((o=r.publicModule)==null?void 0:o.exports.default)&&(typeof r.publicModule.exports.default=="function"?(l.default=`[Function: ${r.publicModule.exports.default.name}]`,l.protoype=Object.getOwnPropertyNames(r.publicModule.exports.default.prototype)):l.default=Object.keys(r.publicModule.exports.default)),sendMessage(JSON.stringify(l,null,"	"))}catch(r){console.log(`Couldn't dump module ${c}`),console.log(r)}sendReply(a,"Modules has been dumped.")}}];registerCommands("aliucord",e)}try{prepareApi(),setUpDebugWS(),injectPluginsManager(),injectCommands()}catch(e){console.error(e)}
